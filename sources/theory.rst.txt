Теоретическая часть
===================
**1. Include файлы.**

Самый фундаментальный класс в библиотеке - класс Triangulation. Он объявлен здесь:

.. code-block:: c++
	
	#include <deal.II/grid/tria.h>

Следующий заголовочные файлы необходимы для циклов с ячейками:

.. code-block:: c++
	
	#include <deal.II/grid/tria_accessor.h>
	#include <deal.II/grid/tria_iterator.h>

Здесь подключаются некоторые функции для создания стандартных сеток:

.. code-block:: c++
	
	#include <deal.II/grid/grid_generator.h>

Вывод сеток в различных графических форматах:

.. code-block:: c++
	
	#include <deal.II/grid/grid_our.h>

Библиотеки для вывода в C++:

.. code-block:: c++
	
	#include <iostream>
	#include <fstream>

Библиотека для использования математических функций:

.. code-block:: c++
	
	#include <cmath>

Для удобства использования всех функций deal.II, а так же для избежания конфликтов с другими библиотеками, используем пространство имён dealii:

.. code-block:: c++
	
	using namespace dealii;

**2. Создание первой сетки.**

В первой функции мы просто создадим квадратную область, которую потом разобьём на множество более маленьких.

.. code-block:: c++
	
	void first_grid()
	{

Первая вещь, которую мы должны сделать - это создать объект класса Triangulation:

.. code-block:: c++
	
	Triangulation<2> triangulation;

"<2>" - в данном случае означает мерность пространства, в котором мы будем работать.

Далее, мы хотим заполнить наш объект одной ячейкой для квадратной области. Для объекта проводим разбиение на области четыре раза, чтобы получить в общем :math:`4^4=256` ячеек:

.. code-block:: c++
	
	GridGenerator::hyper_cube(triangulation);
	triangulation.refine_global(4);

Теперь мы хотим записать графическое представление нашей сетки в выходной файл. Класс GridOut  в deal.II может сделать это в нескольких графических форматах. Возьмём формат SVG для удобства окрытия в браузере:

.. code-block:: c++
	
	std::ofstream out("grid-1.svg");
	GridOut grid_out;
	grid_out.write_svg(triangulation, out);
	std::cout << "Grid written to grid-1.svg" << "\n";
	}

**3. Создание второй сетки.**

Во второй функции мы создадим сетку немного посложнее - кольцевую область.

.. code-block:: c++
	
	void secont_grid()
	{

Снова создаём объект класса Triangulation в 2-мерном пространстве:

.. code-block:: c++
	
	Triangulation<2> triangulaion;

Далее, заполним кольцевую область. Центром кольца должна быть точка (1, 0), а внутренний и внешний радиус 0.5 и 1.0, соответственно. Число ячеек, на которое разобьётся кольцо, может быть определенно автоматически, но мы в качестве последнего аргумента установим 10, т.е. разобьётся на 10 ячеек:

.. code-block:: c++
	
	const Point<2> center(1, 0);
	const double inner_radius = 0.5, outer_radius = 1.0;
	GridGenerator::hyper_shell(
		triangulation, center, inner_radius, outer_radius, 10);

Для деменострации цикла, который проходит по всем ячейкам, уточним сетку в 5 шагов по направлению к внутреннему кругу области:

.. code-block:: c++
	
	for(unsigned int step = 0; step < 5; ++step)
	{

Далее, нам нужно в цикле использовать только активные ячейки триангуляции. Активные ячейки - это ячейки, которые ещё могут "делиться". 
Так как триангуляция это не обычный массив ячеек, придётся использовать специальный итератор, чтобы "пробежаться" по всем активным ячейками:

.. code-block:: c++
	
	for(auto it = triangulation.active_cell_iterators().begin();
		it != triangulation.active_cell_iterators().end();
		++it)
		{
			auto cell = *it;
		}

Вышеприведённый цикл можно записать в более короткой форме:

.. code-block:: c++
	
	for(auto &cell : triangulation.active_cell_iterators())
	{

Далее, мы хотим перебрать все вершины ячекк. Поскольку мы находимся в 2-х мерном пространстве, мы знаем, что каждая ячейка имеет ровно четыре вершины. Однако вместо использования константы 4, мы запишем так, чтобы цикл сам вычислял, в зависимости от мерности пространства, количество вершин у ячеек. Для этого используем класс GeometryInfo:

.. code-block:: c++
	
	for (unsigned int v=0; v < GeometryInfo<2>::vertices_per_cell; ++v)
	{

Если эта ячейка находится на внутренне границе, то хотя бы одна вершина должна находиться на внутреннем кольце, а значит иметь радиус до центра ровно 0.5. Можем вычислить это расстояние, и если это так, то мы активируем флаг это ячейки для последующей разбивки. После этого прерываем цикл и переходим к следующей ячейке.

.. code-block:: c++
	
	const double distance_from_center =
		center.distance(cell->vertex(v));
		
	if(std::fabs(distance_from_center - inner_radius) < 1e-10)
		{
			cell->set_refine_flag();
			break;
		}
	}
	}


Теперь, когда мы отметили все нужные ячейки, мы можем разбить их с использованием триангуляции:

.. code-block:: c++
	
	triangulation.execute_coarsening_and_refinement();
	}


Наконец, после всех итераций, полученный файл мы хотим записать в формате SVG:

.. code-block:: c++
	
	std::ofstream out("grid-2.svg");
	GridOut grid_out;
	grid_out.write_svg(triangulation, out);
	
	std::cout << "Grid written to grid-2.svg" << "\n";
	}


**4. Функция main()**

Функция main() будет иметь следующий вид:

.. code-block:: c++
	
	int main(){
		first_grid();
		second_grid();
	}


**Дополнительно**

В качесте дополнительного упражнения вычислим общее количество ячеек и выведем это число:

.. code-block:: c++

	int count = 0;
	for (auto &cell : triangulation.cell_iterators()) {
		count++;
	}
	std::cout << "Count = " << count << "\n";



